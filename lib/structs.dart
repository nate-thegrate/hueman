import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:super_hueman/pages/ads.dart';
import 'package:super_hueman/pages/intense.dart';
import 'package:super_hueman/pages/intro.dart';
import 'package:super_hueman/inverse_pages/inverse_menu.dart';
import 'package:super_hueman/pages/main_menu.dart';
import 'package:super_hueman/pages/sandbox.dart';

/// ```dart
///
/// await sleep(3);
/// ```
/// is just like `time.sleep(3)` in Python.
///
/// Must be called in an `async` function.
Future<void> sleep(double seconds) =>
    Future.delayed(Duration(milliseconds: (seconds * 1000).toInt()));

enum Pages {
  mainMenu(MainMenu()),
  inverseMenu(InverseMenu()),
  intro3(IntroMode(3)),
  intro6(IntroMode(6)),
  intro12(IntroMode(12)),
  intense(IntenseMode()),
  master(IntenseMode('master')),
  sandbox(Sandbox()),
  ads(Ads()),
  ;

  final Widget widget;
  const Pages(this.widget);

  String call() {
    if (name == 'inverseMenu') {
      return 'invert!';
    }
    if (name.contains('intro')) {
      return '${name.substring(5)} colors';
    }
    return name;
  }

  static Map<String, WidgetBuilder> routes = {
    for (final page in values) page(): (context) => page.widget
  };

  String get gameMode {
    switch (this) {
      case intro3:
        return 'intro  (3 colors)';
      case intro6:
        return 'intro  (6 colors)';
      case intro12:
        return 'intro  (12 colors)';
      case intense:
        return 'Intense';
      case master:
        return 'Master';
      default:
        return "lol this shouldn't pop up";
    }
  }
}

bool mastery = true;
bool inverted = false;
bool casualMode = true;
bool autoSubmit = false;

abstract class ScoreKeeper {
  Pages get page;
  Widget get midRoundDisplay;
  Widget get finalDetails;
  Widget get finalScore;
  void scoreTheRound();
  void roundCheck(BuildContext context);
}

extension ContextStuff on BuildContext {
  /// less stuff to type now :)
  void goto(Pages page) => Navigator.pushReplacementNamed(this, page());
}

void addListener(ValueChanged<RawKeyEvent> func) => RawKeyboard.instance.addListener(func);
void yeetListener(ValueChanged<RawKeyEvent> func) => RawKeyboard.instance.removeListener(func);

Color hsv(num h, double s, double v) => HSVColor.fromAHSV(1, h.toDouble(), s, v).toColor();

Color contrastWith(Color c, {double threshold = .2}) =>
    (c.computeLuminance() > threshold) ? Colors.black : Colors.white;

extension HexCode on Color {
  /// The hexadecimal color code (doesn't include alpha).
  String get hexCode => '#${toString().substring(10, 16).toUpperCase()}';

  String get roundedHexCode {
    int snaptoVals(int i) {
      const int tolerance = 0x0F;
      for (final int snappable in [0x00, 0x80, 0xFF]) {
        if ((i - snappable).abs() <= tolerance) return snappable;
      }
      return i;
    }

    return Color.fromARGB(
      255,
      snaptoVals(red),
      snaptoVals(green),
      snaptoVals(blue),
    ).hexCode;
  }
}

const Map<String, String> colorNames = {
  '#FF0000': 'red',
  '#FF8000': 'orange',
  '#FFFF00': 'yellow',
  '#80FF00': 'lime',
  '#00FF00': 'green',
  '#00FF80': 'jade',
  '#00FFFF': 'cyan',
  '#0080FF': 'azure',
  '#0000FF': 'blue',
  '#8000FF': 'violet',
  '#FF00FF': 'magenta',
  '#FF0080': 'rose',
  '#FFFFFF': 'white',
  '#808080': 'gray',
  '#000000': 'black',
};

Color colorFromName(String colorName) {
  for (final entry in colorNames.entries) {
    if (entry.value == colorName) {
      return Color(int.parse(entry.key.substring(1), radix: 16) + 0xFF000000);
    }
  }
  throw ArgumentError('color $colorName not found');
}

const List<int> _epicColors = [
  0xffffa3a3,
  0xffffa3a1,
  0xffffa39f,
  0xffffa49f,
  0xffffa49d,
  0xffffa49b,
  0xffffa499,
  0xffffa497,
  0xffffa597,
  0xffffa493,
  0xffffa593,
  0xffffa48f,
  0xffffa48d,
  0xffffa48b,
  0xffffa68b,
  0xffffa587,
  0xffffa685,
  0xffffa683,
  0xffffa680,
  0xffffa57c,
  0xffffa578,
  0xffffa778,
  0xffffa774,
  0xffffa770,
  0xffffa76c,
  0xffffa768,
  0xffffa764,
  0xffffa760,
  0xffffa85c,
  0xffffa958,
  0xffffa954,
  0xffffa84c,
  0xffffa948,
  0xffffa940,
  0xffffa938,
  0xffffa930,
  0xffffa928,
  0xffffa920,
  0xffffaa18,
  0xffffab10,
  0xffffaa00,
  0xfffbac00,
  0xfff7ad00,
  0xfff5b000,
  0xfff1b100,
  0xffedb200,
  0xffebb400,
  0xffe7b500,
  0xffe3b600,
  0xffe1b800,
  0xffddb800,
  0xffdbba00,
  0xffd7ba00,
  0xffd5bc00,
  0xffd1bc00,
  0xffcfbe00,
  0xffcbbe00,
  0xffc9bf00,
  0xffc7c100,
  0xffc5c200,
  0xffc2c200,
  0xffc0c300,
  0xffbdc300,
  0xffbbc500,
  0xffb8c500,
  0xffb5c500,
  0xffb3c700,
  0xffb0c700,
  0xffadc700,
  0xffabc900,
  0xffa8c900,
  0xffa4c900,
  0xffa3cb00,
  0xff9fcb00,
  0xff9ccb00,
  0xff99cc00,
  0xff96cd00,
  0xff93cd00,
  0xff90cd00,
  0xff8ecf00,
  0xff8acf00,
  0xff87cf00,
  0xff84d000,
  0xff81d100,
  0xff7ed100,
  0xff7ad100,
  0xff77d100,
  0xff74d300,
  0xff71d300,
  0xff6dd300,
  0xff6ad300,
  0xff67d500,
  0xff63d500,
  0xff60d500,
  0xff5cd500,
  0xff59d500,
  0xff55d500,
  0xff52d700,
  0xff4fd700,
  0xff4bd700,
  0xff48d700,
  0xff44d700,
  0xff41d700,
  0xff3dd700,
  0xff3ad800,
  0xff36d900,
  0xff33d900,
  0xff2fd900,
  0xff2bd900,
  0xff28d900,
  0xff24d900,
  0xff21d900,
  0xff1dd900,
  0xff19d900,
  0xff16d900,
  0xff12d900,
  0xff0ed900,
  0xff0bd900,
  0xff07d900,
  0xff04d900,
  0xff00d900,
  0xff00d904,
  0xff00d907,
  0xff00d90b,
  0xff00d90e,
  0xff00d912,
  0xff00d916,
  0xff00d919,
  0xff00d91d,
  0xff00d921,
  0xff00d924,
  0xff00d928,
  0xff00d92b,
  0xff00d92f,
  0xff00d933,
  0xff00d936,
  0xff00d93a,
  0xff00d93e,
  0xff00d941,
  0xff00d945,
  0xff00d948,
  0xff00d94c,
  0xff00d950,
  0xff00d953,
  0xff00d957,
  0xff00d95a,
  0xff00d95e,
  0xff00d861,
  0xff00d764,
  0xff00d768,
  0xff00d76c,
  0xff00d76f,
  0xff00d773,
  0xff00d776,
  0xff00d77a,
  0xff00d77e,
  0xff00d781,
  0xff00d785,
  0xff00d788,
  0xff00d78c,
  0xff00d58e,
  0xff00d592,
  0xff00d595,
  0xff00d599,
  0xff00d59c,
  0xff00d5a0,
  0xff00d5a3,
  0xff00d5a7,
  0xff00d4aa,
  0xff00d3ac,
  0xff00d3b0,
  0xff00d3b4,
  0xff00d3b7,
  0xff00d3bb,
  0xff00d3be,
  0xff00d3c2,
  0xff00d1c3,
  0xff00d1c7,
  0xff00d1ca,
  0xff00d1ce,
  0xff00d1d1,
  0xff00d0d3,
  0xff00d0d7,
  0xff00d0db,
  0xff00d0df,
  0xff00cee1,
  0xff00cee5,
  0xff00cee9,
  0xff00cded,
  0xff00cdf1,
  0xff00ccf5,
  0xff00cbf9,
  0xff00ccff,
  0xff10cbff,
  0xff20cbff,
  0xff2ccaff,
  0xff38caff,
  0xff40c9ff,
  0xff48c8ff,
  0xff50c7ff,
  0xff58c7ff,
  0xff5cc6ff,
  0xff60c5ff,
  0xff68c5ff,
  0xff6cc4ff,
  0xff70c3ff,
  0xff74c3ff,
  0xff78c2ff,
  0xff7cc2ff,
  0xff80c1ff,
  0xff83c1ff,
  0xff85c0ff,
  0xff87bfff,
  0xff8bbfff,
  0xff8bbeff,
  0xff8fbeff,
  0xff93beff,
  0xff93bdff,
  0xff97bdff,
  0xff97bcff,
  0xff99bbff,
  0xff9bbbff,
  0xff9dbbff,
  0xff9fbaff,
  0xffa1baff,
  0xffa3baff,
  0xffa3b9ff,
  0xffa5b9ff,
  0xffa7b9ff,
  0xffa9b9ff,
  0xffa9b8ff,
  0xffabb8ff,
  0xffadb8ff,
  0xffadb7ff,
  0xffafb7ff,
  0xffafb6ff,
  0xffb1b7ff,
  0xffb1b5ff,
  0xffb3b6ff,
  0xffb3b5ff,
  0xffb5b5ff,
  0xffb7b5ff,
  0xffb8b5ff,
  0xffb7b3ff,
  0xffb8b3ff,
  0xffbab3ff,
  0xffbbb3ff,
  0xffbcb3ff,
  0xffbdb3ff,
  0xffbeb2ff,
  0xffbeb1ff,
  0xffc0b1ff,
  0xffc1b1ff,
  0xffc2b1ff,
  0xffc3b1ff,
  0xffc4b0ff,
  0xffc5afff,
  0xffc6afff,
  0xffc7afff,
  0xffc9afff,
  0xffcaafff,
  0xffcaadff,
  0xffcbadff,
  0xffcdadff,
  0xffceadff,
  0xffcfadff,
  0xffd0abff,
  0xffd1abff,
  0xffd2abff,
  0xffd4abff,
  0xffd5abff,
  0xffd6a9ff,
  0xffd7a9ff,
  0xffd8a9ff,
  0xffd9a7ff,
  0xffdaa7ff,
  0xffdca7ff,
  0xffdda7ff,
  0xffdea5ff,
  0xffe0a5ff,
  0xffe1a5ff,
  0xffe2a3ff,
  0xffe4a3ff,
  0xffe5a3ff,
  0xffe7a3ff,
  0xffe8a1ff,
  0xffe9a1ff,
  0xffea9fff,
  0xffec9fff,
  0xffed9fff,
  0xffef9fff,
  0xfff09dff,
  0xfff29bff,
  0xfff39bff,
  0xfff59bff,
  0xfff79bff,
  0xfff899ff,
  0xfffa97ff,
  0xfffc97ff,
  0xfffd97ff,
  0xffff95ff,
  0xffff97fd,
  0xffff97fc,
  0xffff97fa,
  0xffff97f8,
  0xffff97f6,
  0xffff97f5,
  0xffff97f3,
  0xffff97f1,
  0xffff97ef,
  0xffff97ee,
  0xffff99ec,
  0xffff99eb,
  0xffff99e9,
  0xffff99e7,
  0xffff9be6,
  0xffff9be4,
  0xffff9be3,
  0xffff9be1,
  0xffff9bdf,
  0xffff9bde,
  0xffff9bdc,
  0xffff9bda,
  0xffff9bd9,
  0xffff9bd7,
  0xffff9bd5,
  0xffff9dd5,
  0xffff9dd3,
  0xffff9dd1,
  0xffff9dd0,
  0xffff9dce,
  0xffff9dcd,
  0xffff9fcc,
  0xffff9fca,
  0xffff9fc9,
  0xffff9fc7,
  0xffff9fc6,
  0xffff9fc4,
  0xffff9fc2,
  0xffff9fc1,
  0xffff9fbf,
  0xffff9fbe,
  0xffff9fbc,
  0xffff9fba,
  0xffff9fb9,
  0xffffa1b9,
  0xffffa1b7,
  0xffffa1b6,
  0xffffa1b4,
  0xffffa1b3,
  0xffffa1b1,
  0xffffa1af,
  0xffffa1ae,
  0xffffa1ac,
  0xffffa3ad,
  0xffffa3ab,
  0xffffa3a9,
  0xffffa3a8,
  0xffffa3a6,
  0xffffa3a5,
];
const List<int> _inverseColors = [
  0xff9e0000,
  0xff9d0300,
  0xff9c0500,
  0xff9c0800,
  0xff9b0a00,
  0xff9b0d00,
  0xff9a0f00,
  0xff991200,
  0xff981400,
  0xff971700,
  0xff961900,
  0xff951b00,
  0xff941e00,
  0xff932000,
  0xff922200,
  0xff902400,
  0xff8f2600,
  0xff8d2800,
  0xff8c2a00,
  0xff8a2c00,
  0xff892e00,
  0xff872f00,
  0xff863100,
  0xff843300,
  0xff823400,
  0xff803600,
  0xff7f3700,
  0xff7d3800,
  0xff7b3a00,
  0xff7a3b00,
  0xff783c00,
  0xff763d00,
  0xff753e00,
  0xff733f00,
  0xff714000,
  0xff704100,
  0xff6e4200,
  0xff6c4300,
  0xff6b4400,
  0xff694400,
  0xff684500,
  0xff664600,
  0xff654700,
  0xff634700,
  0xff624800,
  0xff614800,
  0xff5f4900,
  0xff5e4a00,
  0xff5d4a00,
  0xff5b4b00,
  0xff5a4b00,
  0xff594c00,
  0xff584c00,
  0xff564c00,
  0xff554d00,
  0xff544d00,
  0xff534e00,
  0xff524e00,
  0xff514e00,
  0xff504f00,
  0xff4f4f00,
  0xff4e4f00,
  0xff4d4f00,
  0xff4c5000,
  0xff4b5000,
  0xff4a5000,
  0xff495100,
  0xff475100,
  0xff465100,
  0xff455100,
  0xff445200,
  0xff435200,
  0xff425200,
  0xff415200,
  0xff3f5300,
  0xff3e5300,
  0xff3d5300,
  0xff3c5400,
  0xff3b5400,
  0xff395400,
  0xff385400,
  0xff375400,
  0xff365500,
  0xff345500,
  0xff335500,
  0xff325500,
  0xff305600,
  0xff2f5600,
  0xff2e5600,
  0xff2c5600,
  0xff2b5600,
  0xff2a5600,
  0xff285700,
  0xff275700,
  0xff265700,
  0xff245700,
  0xff235700,
  0xff225700,
  0xff205800,
  0xff1f5800,
  0xff1d5800,
  0xff1c5800,
  0xff1a5800,
  0xff195800,
  0xff185800,
  0xff165800,
  0xff155900,
  0xff135900,
  0xff125900,
  0xff105900,
  0xff0f5900,
  0xff0d5900,
  0xff0c5900,
  0xff0a5900,
  0xff095900,
  0xff075900,
  0xff065900,
  0xff045900,
  0xff035900,
  0xff015900,
  0xff005900,
  0xff005901,
  0xff005903,
  0xff005904,
  0xff005906,
  0xff005907,
  0xff005909,
  0xff00590a,
  0xff00590c,
  0xff00590d,
  0xff00590f,
  0xff005910,
  0xff005912,
  0xff005913,
  0xff005915,
  0xff005916,
  0xff005918,
  0xff005919,
  0xff00591b,
  0xff00591c,
  0xff00591e,
  0xff00591f,
  0xff005921,
  0xff005922,
  0xff005923,
  0xff005925,
  0xff005926,
  0xff005928,
  0xff005829,
  0xff00582b,
  0xff00582c,
  0xff00582e,
  0xff00582f,
  0xff005830,
  0xff005832,
  0xff005833,
  0xff005835,
  0xff005836,
  0xff005838,
  0xff005839,
  0xff00583a,
  0xff00573c,
  0xff00573d,
  0xff00573f,
  0xff005740,
  0xff005741,
  0xff005743,
  0xff005744,
  0xff005745,
  0xff005747,
  0xff005748,
  0xff00564a,
  0xff00564b,
  0xff00564c,
  0xff00564e,
  0xff00564f,
  0xff005650,
  0xff005651,
  0xff005653,
  0xff005654,
  0xff005555,
  0xff005557,
  0xff005558,
  0xff005559,
  0xff00555b,
  0xff00555c,
  0xff00545e,
  0xff00545f,
  0xff005461,
  0xff005463,
  0xff005464,
  0xff005366,
  0xff005368,
  0xff00536a,
  0xff00536c,
  0xff00526e,
  0xff005270,
  0xff005272,
  0xff005174,
  0xff005177,
  0xff005179,
  0xff00507b,
  0xff00507e,
  0xff004f81,
  0xff004f83,
  0xff004e86,
  0xff004e89,
  0xff004d8c,
  0xff004c8f,
  0xff004c93,
  0xff004b96,
  0xff004a99,
  0xff00499d,
  0xff0048a1,
  0xff0047a4,
  0xff0046a8,
  0xff0045ac,
  0xff0044b0,
  0xff0042b4,
  0xff0041b9,
  0xff003fbd,
  0xff003dc1,
  0xff003bc6,
  0xff0039ca,
  0xff0037cf,
  0xff0035d3,
  0xff0032d7,
  0xff0030dc,
  0xff002de0,
  0xff002ae4,
  0xff0027e7,
  0xff0023eb,
  0xff0020ee,
  0xff001cf2,
  0xff0018f4,
  0xff0015f7,
  0xff0011f9,
  0xff000dfb,
  0xff0008fc,
  0xff0004fe,
  0xff0000ff,
  0xff0400ff,
  0xff0800fe,
  0xff0d00fe,
  0xff1100fd,
  0xff1500fd,
  0xff1900fc,
  0xff1d00fb,
  0xff2100fa,
  0xff2500f9,
  0xff2900f7,
  0xff2d00f6,
  0xff3100f5,
  0xff3500f3,
  0xff3800f1,
  0xff3c00f0,
  0xff3f00ee,
  0xff4300ec,
  0xff4600ea,
  0xff4900e7,
  0xff4c00e5,
  0xff4f00e3,
  0xff5200e1,
  0xff5500de,
  0xff5800dc,
  0xff5b00d9,
  0xff5d00d7,
  0xff5f00d4,
  0xff6200d2,
  0xff6400cf,
  0xff6600cc,
  0xff6800ca,
  0xff6a00c7,
  0xff6c00c5,
  0xff6e00c2,
  0xff7000c0,
  0xff7100bd,
  0xff7300bb,
  0xff7500b8,
  0xff7600b6,
  0xff7700b3,
  0xff7900b1,
  0xff7a00ae,
  0xff7b00ac,
  0xff7d00aa,
  0xff7e00a8,
  0xff7f00a5,
  0xff8000a3,
  0xff8100a1,
  0xff82009f,
  0xff83009d,
  0xff83009b,
  0xff840099,
  0xff850097,
  0xff860095,
  0xff870093,
  0xff870091,
  0xff88008f,
  0xff89008d,
  0xff89008c,
  0xff8a008a,
  0xff8a0088,
  0xff8b0086,
  0xff8c0085,
  0xff8c0083,
  0xff8d0081,
  0xff8d007f,
  0xff8e007d,
  0xff8e007b,
  0xff8f0079,
  0xff8f0078,
  0xff900076,
  0xff900074,
  0xff910072,
  0xff910070,
  0xff92006d,
  0xff92006b,
  0xff930069,
  0xff930067,
  0xff940065,
  0xff940063,
  0xff950061,
  0xff95005e,
  0xff96005c,
  0xff96005a,
  0xff960058,
  0xff970055,
  0xff970053,
  0xff980051,
  0xff98004e,
  0xff98004c,
  0xff99004a,
  0xff990047,
  0xff990045,
  0xff990043,
  0xff9a0040,
  0xff9a003e,
  0xff9a003b,
  0xff9b0039,
  0xff9b0036,
  0xff9b0034,
  0xff9b0031,
  0xff9b002f,
  0xff9c002c,
  0xff9c002a,
  0xff9c0027,
  0xff9c0024,
  0xff9c0022,
  0xff9d001f,
  0xff9d001d,
  0xff9d001a,
  0xff9d0018,
  0xff9d0015,
  0xff9d0012,
  0xff9d0010,
  0xff9d000d,
  0xff9d000a,
  0xff9d0008,
  0xff9d0005,
  0xff9d0003
];

const int _epicStepSize = 60;
int epicHue = 0, inverseHue = 0;
late int _lastEpicChange;

/// a [Color] with [epicHue] as its hue.
///
/// The color is retrieved from [_epicColors],
/// where all colors have the same luminosity.
Color get epicColor => Color(_epicColors[epicHue]);

/// similar to [epicColor], but the color is darker.
///
/// It also cycles the reverse way through the hues.
Color get inverseColor => Color(_inverseColors[inverseHue]);
Ticker epicSetup(StateSetter setState) {
  void epicCycle(Duration elapsed) {
    if (elapsed.inMilliseconds >= _lastEpicChange + _epicStepSize) {
      _lastEpicChange += _epicStepSize;
      setState(() => epicHue = ++epicHue % 360);
    }
  }

  epicHue = rng.nextInt(360);
  _lastEpicChange = 0;
  final Ticker ticker = Ticker(epicCycle)..start();

  return ticker;
}

Ticker inverseSetup(StateSetter setState) {
  void inverseCycle(Duration elapsed) {
    setState(() => inverseHue = --inverseHue % 360);
  }

  inverseHue = rng.nextInt(360);
  final Ticker ticker = Ticker(inverseCycle)..start();

  return ticker;
}

extension ToInt on TextEditingValue {
  int toInt() => text.isEmpty ? 0 : int.parse(text);
}

final rng = Random();
